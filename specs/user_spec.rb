require_relative '../lib/sacra_on_rails'
require_relative '../user'

class UserSpec < SacraOnRails::TestCase

  def self.run
    puts "\nðŸ§ª INICIANDO TESTES DO MODELO USER"
    puts "-" * 50
    
    # Limpar dados anteriores para testes isolados
    User.class_variable_get(:@@records)[User] = []
    
    # Limpar resultados anteriores
    clear_results
    
    # Teste 1: ValidaÃ§Ã£o obrigatÃ³ria do name
    test "ValidaÃ§Ã£o obrigatÃ³ria do name" do
      user = User.new(email: "test@email.com", password: "123456")
      assert !user.save, "UsuÃ¡rio sem name nÃ£o deve ser salvo"
      puts "  âœ… ValidaÃ§Ã£o do name funcionando"
    end
    
    # Teste 2: ValidaÃ§Ã£o obrigatÃ³ria do email
    test "ValidaÃ§Ã£o obrigatÃ³ria do email" do
      user = User.new(name: "JoÃ£o", password: "123456")
      assert !user.save, "UsuÃ¡rio sem email nÃ£o deve ser salvo"
      puts "  âœ… ValidaÃ§Ã£o do email funcionando"
    end
    
    # Teste 3: ValidaÃ§Ã£o obrigatÃ³ria do password
    test "ValidaÃ§Ã£o obrigatÃ³ria do password" do
      user = User.new(name: "JoÃ£o", email: "test@email.com")
      assert !user.save, "UsuÃ¡rio sem password nÃ£o deve ser salvo"
      puts "  âœ… ValidaÃ§Ã£o do password funcionando"
    end
    
    # Teste 4: Save com todos os atributos obrigatÃ³rios
    test "Save com todos os atributos obrigatÃ³rios" do
      user = User.new(name: "JoÃ£o Silva", email: "joao@email.com", password: "123456")
      assert user.save, "UsuÃ¡rio com todos os atributos deve ser salvo"
      puts "  âœ… Save com atributos obrigatÃ³rios funcionando"
    end
    
    # Teste 5: MÃ©todo count
    test "MÃ©todo count" do
      # Adicionar mais usuÃ¡rios para testar count
      user2 = User.new(name: "Maria Silva", email: "maria@email.com", password: "654321")
      user3 = User.new(name: "Pedro Santos", email: "pedro@email.com", password: "789012")
      user2.save
      user3.save
      
      assert_equal 3, User.count, "Count deve retornar 3 usuÃ¡rios"
      puts "  âœ… MÃ©todo count funcionando"
    end
    
    # Teste 6: MÃ©todo all
    test "MÃ©todo all" do
      all_users = User.all
      assert_equal 3, all_users.size, "MÃ©todo all deve retornar 3 usuÃ¡rios"
      assert all_users.first.is_a?(User), "MÃ©todo all deve retornar objetos User"
      assert all_users.all? { |user| user.is_a?(User) }, "Todos os itens devem ser objetos User"
      puts "  âœ… MÃ©todo all funcionando"
    end
    
    # Teste 7: MÃ©todo find_by por name
    test "MÃ©todo find_by por name" do
      found_user = User.find_by(name: "JoÃ£o Silva")
      assert found_user, "find_by deve encontrar usuÃ¡rio por name"
      assert_equal "JoÃ£o Silva", found_user.name, "UsuÃ¡rio encontrado deve ter o name correto"
      puts "  âœ… MÃ©todo find_by por name funcionando"
    end
    
    # Teste 8: MÃ©todo find_by por email
    test "MÃ©todo find_by por email" do
      found_user = User.find_by(email: "joao@email.com")
      assert found_user, "find_by deve encontrar usuÃ¡rio por email"
      assert_equal "joao@email.com", found_user.email, "UsuÃ¡rio encontrado deve ter o email correto"
      puts "  âœ… MÃ©todo find_by por email funcionando"
    end
    
    # Teste 9: MÃ©todo find_by sem resultado
    test "MÃ©todo find_by sem resultado" do
      found_user = User.find_by(name: "Inexistente")
      assert_nil found_user, "find_by deve retornar nil quando nÃ£o encontra"
      puts "  âœ… MÃ©todo find_by sem resultado funcionando"
    end
    
    # Teste 10: Callback before_save
    test "Callback before_save" do
      user = User.new(name: "Maria", email: "maria@email.com", password: "senha123")
      user.save
      assert_equal "321anres", user.password, "Callback before_save deve inverter o password"
      puts "  âœ… Callback before_save funcionando"
    end
    
    # Gerar relatÃ³rio final
    generate_report
  end

end
